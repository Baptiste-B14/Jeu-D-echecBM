import java.util.Locale;
import java.util.Scanner;


public class Main {
    public static void main(String[] args){

        Scanner sc = new Scanner(System.in).useDelimiter("\n");
        int couleur=0; //blanc =0; nor = 1
        int[][] tblanc = {{0,4},{0,3},{0,2},{0,5},{0,1},{0,6},{0,0},{0,7},{1,0},{1,1},{1,2},{1,3},{1,4},{1,5},{1,6},{1,7}};
        int[][] tnoir = {{7,4},{7,3},{7,2},{7,5},{7,1},{7,6},{7,0},{7,7},{6,0},{6,1},{6,2},{6,3},{6,4},{6,5},{6,6},{6,7}};

        demandeSaisie(couleur, tblanc, tnoir);
        demandePosition();

    }


    public static int demandeSaisie(int couleur, int[][] blanc, int [][] noir){
        Scanner sc = new Scanner(System.in).useDelimiter("\n");
        int indicePiece = -1;
        boolean caseNonVide = false;
        int[][] tab= new int[16][2];
        if(couleur==0){
            tab= blanc;
        }
        if(couleur==1){
            tab = noir;
        }

        do {

            String CaseEchiquier = "";
            do {

                System.out.println("Saisir une position : (format Lettre Chiffre: B5)");
                CaseEchiquier = sc.nextLine().toUpperCase();

            } while (CaseEchiquier.length() != 2 || (CaseEchiquier.charAt(0) < 65 || CaseEchiquier.charAt(0) > 72) || (CaseEchiquier.charAt(1) < 49 || CaseEchiquier.charAt(1) > 56));


            for (int i = 0; i < tab.length; i++) {
                if ((tab[i][0] == CaseEchiquier.charAt(0) - 65) && tab[i][1] == CaseEchiquier.charAt(1) - 49) {
                    indicePiece = i;
                    caseNonVide = true;
                }


            }
            if(!caseNonVide) System.out.println("La case est vide ou contient une pièce qui n'est pas a vous");

        }while(!caseNonVide);

        return indicePiece;

    }




    public static int[] demandePosition(){
        Scanner sc = new Scanner(System.in).useDelimiter("\n");

        int[] position = new int[2];



        String CaseEchiquier = "";
        do {

            System.out.println("Saisir une position : (format Lettre Chiffre: B5)");
            CaseEchiquier = sc.nextLine().toUpperCase();

        }while(CaseEchiquier.length() != 2 || (CaseEchiquier.charAt(0) < 65 || CaseEchiquier.charAt(0) > 72) || (CaseEchiquier.charAt(1) < 49 || CaseEchiquier.charAt(1) > 56));

        position[0] = CaseEchiquier.charAt(0) - 65;
        position[1] = CaseEchiquier.charAt(1) - 49;


        System.out.println("" + position[0] + position[1]);
        return position;
    }

    public static boolean deplacementTour(int tab[][], int indice, int i, int j){  //indice = position actuelle, i = futur x, j = futur y
        int x = tab[indice][0];
        int y = tab[indice][1];

        return ((i!=x && j== y) || (i==x && j!=y));    // (i!=x && j== y) --> deplacement horizontal    (i==x && j!=y) --> deplacement vertical
    }


    public static boolean deplacementFou(int tab[][], int indice, int i, int j){
        int x = tab[indice][0];
        int y = tab[indice][1];

        return ((Math.abs(x-i)) == (Math.abs(y-j)));  // le deplacement horizontal et vertical doivent avoir la meme valeur (diagonal).
        // afin de traiter tout les cas, valeur absolue evite d'avoir des valeur négatives i et j sup a x et y (deplacement vers le bas)é


    }

    public static boolean deplacementReine(int tab[][], int indice, int i, int j){ // combinaison d'un deplacement de tour ou de fou
        return (deplacementFou(tab, indice, i,j) || deplacementTour(tab, indice, i, j));
    }

    public static boolean deplacementCavalier(int tab[][], int indice, int i, int j){
        int x = tab[indice][0];
        int y = tab[indice][1];

        return((Math.abs(x- i)==1 && Math.abs(y-j)==2) || (Math.abs(x- i)==2 && Math.abs(y-j)==1));  // la valeur absolue permet de s'occuper de la symetrie, quelque soit la direction du cavalier
        //une fois éliminée la symetrie selon x et y, il y a deux possibilité de position
        // x+1 et y+2 ou x+2 et y+1;
    }

    public static boolean deplacementRoi(int tab[][], int indice, int i, int j){
        int x = tab[indice][0];
        int y = tab[indice][1];



        return ((Math.abs(y-j) == 1 && Math.abs(x-i) ==0) || (Math.abs(y-j) == 0 && Math.abs(x-i) ==1) || (Math.abs(y-j) == 1 && Math.abs(x-i) ==1));
    }


    public static boolean verifCheminTour(int tabBlanc[][], int tabNoir[][],int couleur, int indice, int i, int j){
        int x, y;
        int [][]tabCouleur;

        if(couleur ==1){
            x = tabNoir[indice][0];
            y = tabNoir[indice][1];
            tabCouleur = tabNoir;
        }else {
            x = tabBlanc[indice][0];
            y = tabBlanc[indice][1];
            tabCouleur = tabBlanc;
        }


        if(x-i > 0){  // meme ligne, changement de colonne vers la gauche
            for(int k=1; k < x-i; k++){
                if(!caseDisponible(x-k, y, 0, tabNoir, tabBlanc) || !caseDisponible(x-k, y, 1, tabNoir, tabBlanc)){
                    return false;
                }

            }
        }

        if(x-i < 0){  // meme ligne changement de colonne vers la droite
            for(int k=1; k < x-i; k++){
                if(!caseDisponible(x+k, y, 0, tabNoir, tabBlanc) || !caseDisponible(x+k, y, 1, tabNoir, tabBlanc)){
                    return false;
                }

            }
        }

        if(y-j < 0){ // meme colonne changement de ligne vers le bas
            for(int k=1; k < x-i; k++){
                if(!caseDisponible(x, y+k, 0, tabNoir, tabBlanc) || !caseDisponible(x, y+k, 1, tabNoir, tabBlanc)){
                    return false;
                }

            }
        }

        if(y-j > 0){ // meme colonne changement de ligne vers le haut
            for(int k=1; k < x-i; k++){
                if(!caseDisponible(x, y-k, 0, tabNoir, tabBlanc) || !caseDisponible(x, y-k, 1, tabNoir, tabBlanc)){
                    return false;
                }

            }
        }
        return true;

    }


    public static boolean verificationDuCheminDame(int indice, int i, int j, int couleur, int[][]noir, int[][] blanc){
        return (verifCheminTour() || verifCheminFou());
    }

    public static boolean caseDisponible(int i, int j, int couleur, int[][]noir, int [][] blanc){
        return true;
    }


    public static void actualisationEchiquier(int i , int j, int indice,int couleur, int[][] noir, int[][]blanc){
        int x, y;
        int [][] tabCouleur, tabEnnemi;

        if(couleur ==1){
            x = noir[indice][0];
            y = noir[indice][1];
            tabCouleur = noir;
            tabEnnemi = blanc;
        }else {
            x = blanc[indice][0];
            y = blanc[indice][1];
            tabCouleur = blanc;
            tabEnnemi = noir ;
        }


        for(int parcours = 0; parcours<tabEnnemi.length; parcours++){
            if((tabEnnemi[parcours][0] == i) && (tabEnnemi[parcours][1] == j)){
                tabEnnemi[parcours][0] = -1;
                tabEnnemi[parcours][1] = -1;
            }
        }
        tabCouleur[indice][0] = i;
        tabCouleur[indice][1] = j;

    }




    public static boolean deplacementPossible(int tab[][], int indice, int i, int j){
        boolean possible = false;

        switch (indice){

            case 0:
                possible = deplacementRoi(tab, indice, i, j);
                break;

            case 1:
                possible = deplacementReine(tab, indice, i, j);
                break;

            case(indice == 2 || indice == 3):
                possible = deplacementFou(tab, indice, i, j);
                break;

            case(indice == 4 || indice == 5):
                possible = deplacementCavalier(tab, indice, i, j);
                break;

            case(indice == 6 || indice == 7):
                possible = deplacementTour(tab, indice, i, j);
                break;
            case(indice >7):
                possible = deplacementPion(tab, indice, i, j);

            default :
                possible = false;
        }
        return possible;
    }
}


