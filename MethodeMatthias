public class Fonctions {
    public static boolean caseDisponible (int i, int j, int couleur, int[][] noir, int[][] blanc){
        if (couleur==0)
            for (int k=0; k<blanc.length; k++)
                if (blanc[k][0]==i && blanc[k][1]==j)
                    return false;
        else if (couleur==1)
            for (int k=0; k<noir.length; k++)
                if(noir[k][0]==i && noir[k][1]==j)
                    return false;
        return true;
    }

    public static boolean deplacementPossiblePion(int indicePiece, int i, int j, int couleur, int[][] noir, int[][] blanc){
        if (couleur==0){
            // Voir quand le pion essaie d'aller une ligne plus loin
            if (blanc[indicePiece][0]+1==i) {
                // Voir s'il y a une pièce noire sur la case[x+1][y]
                if (blanc[indicePiece][1] == j) {
                    for (int k = 0; k < noir.length; k++) {
                        if (noir[k][0] == blanc[indicePiece][0] + 1 && noir[k][1] == j)
                            return false;
                    }
                    return true;
                }
                // Voir s'il y a une pièce noire sur la case[x+1][y-1]
                else if (j == blanc[indicePiece][1] - 1) {
                    for (int k = 0; k < noir.length; k++) {
                        if (noir[k][0] == blanc[indicePiece][0] + 1 && noir[k][1] == j)
                            return true;
                    }
                }
                // Voir s'il y a une pièce noire sur la case[x+1][y+1]
                else if (j == blanc[indicePiece][1] + 1) {
                    for (int k = 0; k < noir.length; k++) {
                        if (noir[k][0] == blanc[indicePiece][0] + 1 && noir[k][1] == j)
                            return true;
                    }
                }
            }
            // Voir quand le pion est à l'origine et qu'il veut aller deux cases plus loin case[x+2][y]
            else if (blanc[indicePiece][0] + 2 == i) {
                for (int k = 0; k < noir.length; k++) {
                    if ((noir[k][0] == blanc[indicePiece][0] + 1 || noir[k][0] == blanc[indicePiece][0] + 2) && noir[k][1] == j)
                        return false;
                }
                return true;
            }
            return false;
            }
        else if(couleur==1){
            // Voir quand le pion essaie d'aller une ligne plus loin
            if (noir[indicePiece][0]-1==i) {
                // Voir s'il y a une pièce blanche sur la case[x-1][y]
                if (noir[indicePiece][1] == j) {
                    for (int k = 0; k < blanc.length; k++) {
                        if (blanc[k][0] == noir[indicePiece][0] - 1 && blanc[k][1] == j)
                            return false;
                    }
                    return true;
                }
                // Voir s'il y a une pièce blanche sur la case[x-1][y-1]
                else if (j == noir[indicePiece][1] - 1) {
                    for (int k = 0; k < blanc.length; k++) {
                        if (blanc[k][0] == noir[indicePiece][0] - 1 && blanc[k][1] == j)
                            return true;
                    }
                }
                // Voir s'il y a une pièce blanche sur la case[x-1][y+1]
                else if (j == noir[indicePiece][1] + 1) {
                    for (int k = 0; k < blanc.length; k++) {
                        if (blanc[k][0] == noir[indicePiece][0] + 1 && blanc[k][1] == j)
                            return true;
                    }
                }
                return false;
            }
            // Voir quand le pion est à l'origine et qu'il veut aller deux cases plus loin
            else if (noir[indicePiece][0] - 2 == i) {
                for (int k = 0; k < blanc.length; k++) {
                    if ((blanc[k][0] == noir[indicePiece][0] -1 || blanc[k][0] == noir[indicePiece][0] - 2) && blanc[k][1] == j)
                        return false;
                }
                return true;
            }
        }

    }

    public static boolean verificationDuCheminFou (int indicePiece, int i, int j, int couleur, int[][] noir, int[][] blanc){
        int x, y;
        if(couleur==0){
            x=blanc[indicePiece][0];
            y=blanc[indicePiece][1];
        }
        else {
            x=noir[indicePiece][0];
            y=noir[indicePiece][1];
        }

        //Partie en haut
        if (j > y)
            //Partie en haut à droite
            if (i > x)
                for (int k = 0; x + k < i; k++)
                    if (!caseDisponible(x + k, y + k, 0, noir, blanc) || !caseDisponible(x + k, y + k, 1, noir, blanc))
                        return false;
            //Partie en haut à gauche
            else
                for (int k = 0; x - k > i; k++)
                    if (!caseDisponible(x - k, y + k, 0, noir, blanc) || !caseDisponible(x - k, y + k, 1, noir, blanc))
                        return false;

        //Partie en bas
        else
            //Partie en bas à droite
            if (i > x)
                for (int k = 0; x + k < i; k++)
                    if (!caseDisponible(x + k, y - k, 0, noir, blanc) || !caseDisponible(x + k, y - k, 1, noir, blanc))
                        return false;
            //Partie en bas à gauche
            else
                for (int k = 0; x - k > i; k++)
                    if (!caseDisponible(x - k, y - k, 0, noir, blanc) || !caseDisponible(x - k, y - k, 1, noir, blanc))
                        return false;
        return true;
    }

    public static boolean echecRoi (int couleur, int[][] noir, int[][] blanc ){
        int xRoi;
        int yRoi;
        if (couleur == 0){
            xRoi = blanc[0][0];
            yRoi = blanc[0][1];
            for (int k=1; k<noir.length ; k++){
                if (noir[k][0] >= 0){
                    if (verificationDeplacementPossible(k, xRoi, yRoi, 1, noir, blanc) && verificationDuChemin (k, xRoi, yRoi, 1, noir, blanc))
                        return true;
                }
            }
        }
        else{
            xRoi = noir[0][0];
            yRoi = noir[0][1];
            for (int k=1; k<blanc.length ; k++){
                if (blanc[k][0] >= 0){
                    if (verificationDeplacementPossible(k, xRoi, yRoi, 0, noir, blanc) && verificationDuChemin (k, xRoi, yRoi, 0, noir, blanc))
                        return true;
                }
            }
        }
        return false;
    }

    public static boolean verificationDuChemin (int indicePiece, int i, int j, int couleur, int[][] noir, int[][] blanc){
        boolean possible=false;
        switch (indicePiece){
            case 1:
                possible = verificationDuCheminDame(indicePiece, i, j, couleur, noir, blanc);
                break;
            case (indicePiece==2 || indicePiece==3):
                possible = verificationDuCheminFou (indicePiece, i, j, couleur, noir, blanc);
                break;
            case(indicePiece==6 || indicePiece==7):
                possible = verificationDuCheminTour (indicePiece, i, j, couleur, noir, blanc);
                break;
            default :
                possible = true;

        }
        return possible;
    }
}
